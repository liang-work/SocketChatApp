name: Multi-Platform Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Select platforms to build'
        required: true
        default: 'linux-x64,linux-arm64,windows-x64,android'
        type: choice
        options:
        - linux-x64
        - linux-arm64
        - windows-x64
        - android
        - all
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  ANDROID_API_LEVEL: '33'
  ANDROID_BUILD_TOOLS_VERSION: '33.0.3'
  ANDROID_NDK_VERSION: '25.2.9519653'

jobs:
  build-linux-x64:
    name: Build Linux x64
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platforms, 'linux-x64') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux x64 executable
      run: |
        python build.py --version ${{ github.event.inputs.version }} --platform linux-x64
        
    - name: Upload Linux x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-linux-x64-${{ github.event.inputs.version }}
        path: dist/
        retention-days: 7

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platforms, 'linux-arm64') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux ARM64 executable
      run: |
        python build.py --version ${{ github.event.inputs.version }} --platform linux-x64
        # Rename file to distinguish architecture
        mv dist/SocketChatApp-linux-x64-${{ github.event.inputs.version }} dist/SocketChatApp-linux-arm64-${{ github.event.inputs.version }}
        
    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-linux-arm64-${{ github.event.inputs.version }}
        path: dist/
        retention-days: 7

  build-windows-x64:
    name: Build Windows x64
    runs-on: windows-latest
    if: contains(github.event.inputs.platforms, 'windows-x64') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows x64 executable
      run: |
        python build.py --version ${{ github.event.inputs.version }} --platform windows-x64
        
    - name: Upload Windows x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-windows-x64-${{ github.event.inputs.version }}
        path: dist/
        retention-days: 7

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.platforms, 'android') || github.event.inputs.platforms == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
        build-tools-version: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
        platform: android-${{ env.ANDROID_API_LEVEL }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Buildozer and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install buildozer cython
        
    - name: Install Android build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          git \
          python3-pip \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libtinfo-dev \
          cmake \
          unzip \
          curl
          
    - name: Configure Buildozer for correct Build Tools
      run: |
        # 创建buildozer配置文件，强制使用指定的Build Tools版本
        mkdir -p ~/.buildozer
        cat > ~/.buildozer/android.cfg << EOF
        [app]
        # 强制使用指定的Build Tools版本
        android.build_tools_version = ${{ env.ANDROID_BUILD_TOOLS_VERSION }}
        android.api = ${{ env.ANDROID_API_LEVEL }}
        android.minapi = 21
        android.ndk = ${{ env.ANDROID_NDK_VERSION }}
        EOF
        
    - name: Build Android APK
      run: |
        # 检查Android环境
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        # 验证Aidl工具
        echo "Aidl path: $(which aidl || echo 'Not found')"
        
        # 检查Build Tools目录
        echo "Build Tools directory:"
        ls -la $ANDROID_HOME/build-tools/ || true
        
        # 使用buildozer构建
        buildozer -v android debug
        
        # 重命名APK文件以包含版本号
        if [ -f bin/*.apk ]; then
          mv bin/*.apk bin/SocketChatApp-android-${{ github.event.inputs.version }}.apk
        else
          echo "No APK file found in bin directory"
          ls -la bin/ || true
          exit 1
        fi
        
    - name: Upload Android artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-android-${{ github.event.inputs.version }}
        path: bin/
        retention-days: 7

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux-x64, build-linux-arm64, build-windows-x64, build-android]
    if: github.event.inputs.create_release == 'true'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: List downloaded artifacts
      run: ls -R artifacts/
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: SocketChatApp ${{ github.event.inputs.version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/
        asset_name: SocketChatApp-${{ github.event.inputs.version }}-multi-platform.zip
        asset_content_type: application/zip