name: Multi-Platform Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: '选择要构建的平台（可多选）'
        type: choice
        options:
        - all
        - linux-x64
        - linux-arm64
        - windows-x64
        - android
        required: true
        default: 'linux-x64'
        multiple: true

jobs:
  build-linux-x64:
    name: Build Linux x64
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'linux-x64') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --name SocketChatApp-linux-x64 main.py

    - name: Upload Linux x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-linux-x64
        path: dist/SocketChatApp-linux-x64
        retention-days: 30

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'linux-arm64') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --name SocketChatApp-linux-arm64 main.py

    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-linux-arm64
        path: dist/SocketChatApp-linux-arm64
        retention-days: 30

  build-windows-x64:
    name: Build Windows x64
    runs-on: windows-latest
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'windows-x64') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --name SocketChatApp-windows-x64 --console main.py

    - name: Upload Windows x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-windows-x64
        path: dist/SocketChatApp-windows-x64.exe
        retention-days: 30

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.inputs.platforms, 'all') || contains(github.event.inputs.platforms, 'android') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Android SDK and tools
      run: |
        # 安装Android命令行工具到用户目录
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        mkdir -p $HOME/android-sdk
        unzip -q commandlinetools-linux-9477386_latest.zip -d $HOME/android-sdk/cmdline-tools
        mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        
        # 设置环境变量
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

    - name: Accept Android licenses
      run: |
        # 创建许可证接受文件 - 修复目录创建问题
        mkdir -p $HOME/.android/licenses
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $HOME/.android/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481" >> $HOME/.android/licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > $HOME/.android/licenses/android-sdk-preview-license
        echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $HOME/.android/licenses/intel-android-extra-license

    - name: Install Android SDK components
      run: |
        # 安装必要的Android SDK组件
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --update
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" "ndk;25.2.9519653" --verbose

    - name: Verify Android tools installation
      run: |
        # 验证工具安装
        echo "检查aidl工具..."
        $HOME/android-sdk/build-tools/33.0.0/aidl --version || echo "aidl工具未找到"
        echo "检查adb工具..."
        $HOME/android-sdk/platform-tools/adb version || echo "adb工具未找到"

    - name: Install Buildozer and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer
        pip install -r requirements.txt
        pip install cython
        sudo apt-get update
        sudo apt-get install -y git unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev

    - name: Configure Buildozer Android SDK
      run: |
        # 配置Buildozer使用我们安装的Android SDK
        mkdir -p $HOME/.buildozer/android/platform
        
        # 创建完整的SDK目录结构，包括tools/bin目录
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
        
        # 创建符号链接，让Buildozer使用我们安装的SDK管理器
        ln -sf $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        ln -sf $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # 复制许可证文件到Buildozer的SDK目录
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/licenses
        cp $HOME/.android/licenses/* $HOME/.buildozer/android/platform/android-sdk/licenses/
        
        # 设置环境变量让Buildozer使用我们的SDK
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV

    - name: Validate buildozer.spec
      run: |
        echo "检查buildozer.spec文件..."
        if [ -f buildozer.spec ]; then
          echo "buildozer.spec文件存在，跳过初始化"
        else
          echo "buildozer.spec文件不存在，进行初始化"
          buildozer init
        fi

    - name: Build Android APK
      run: |
        # 使用非交互模式构建，自动接受许可证
        # 设置环境变量，确保Buildozer使用正确的SDK管理器
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        
        # 预安装必要的SDK组件，避免Buildozer尝试安装时失败
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0" --verbose
        
        # 构建APK
        buildozer -v android debug

    - name: Upload Android APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: socketchatapp-android
        path: bin/*.apk
        retention-days: 30