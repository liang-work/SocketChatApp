name: Multi-Platform Build

on:
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'
      build_all:
        description: '构建所有平台'
        type: boolean
        required: true
        default: true
      build_linux_x64:
        description: '构建Linux x64'
        type: boolean
        required: false
        default: true
      build_linux_arm64:
        description: '构建Linux ARM64'
        type: boolean
        required: false
        default: true
      build_windows_x64:
        description: '构建Windows x64'
        type: boolean
        required: false
        default: true
      build_android:
        description: '构建Android APK'
        type: boolean
        required: false
        default: true

env:
  PROJECT_NAME: "SocketChatApp"
  VERSION: ${{ github.event.inputs.version }}

jobs:
  build-linux-x64:
    if: ${{ github.event.inputs.build_all || github.event.inputs.build_linux_x64 }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux x64 executable
      run: |
        pyinstaller --onefile --name "${PROJECT_NAME}-linux-x64-${VERSION}" \
          --add-data "templates:templates" \
          --hidden-import=queue \
          --hidden-import=flask \
          --hidden-import=webview \
          main.py
    
    - name: Upload Linux x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64-3.11
        path: dist/${PROJECT_NAME}-linux-x64-${VERSION}
        retention-days: 30

  build-linux-arm64:
    if: ${{ github.event.inputs.build_all || github.event.inputs.build_linux_arm64 }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU for ARM64
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux ARM64 executable
      run: |
        pyinstaller --onefile --name "${PROJECT_NAME}-linux-arm64-${VERSION}" \
          --add-data "templates:templates" \
          --hidden-import=queue \
          --hidden-import=flask \
          --hidden-import=webview \
          main.py
    
    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64-3.11
        path: dist/${PROJECT_NAME}-linux-arm64-${VERSION}
        retention-days: 30

  build-windows-x64:
    if: ${{ github.event.inputs.build_all || github.event.inputs.build_windows_x64 }}
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows x64 executable
      run: |
        pyinstaller --onefile --name "$env:PROJECT_NAME-windows-x64-$env:VERSION.exe" `
          --add-data "templates;templates" `
          --hidden-import=queue `
          --hidden-import=flask `
          --hidden-import=webview `
          main.py
    
    - name: Upload Windows x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64-3.11
        path: dist/${{ env.PROJECT_NAME }}-windows-x64-${{ env.VERSION }}.exe
        retention-days: 30

  build-android-apk:
    if: ${{ github.event.inputs.build_all || github.event.inputs.build_android }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Android SDK and tools
      run: |
        # 安装必要的系统工具
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # 在用户目录下创建Android SDK目录（避免权限问题）
        mkdir -p $HOME/android-sdk
        
        # 下载并安装Android Command Line Tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        # 创建正确的目录结构：cmdline-tools/latest/
        mkdir -p $HOME/android-sdk/cmdline-tools/latest
        unzip -q commandlinetools-linux-9477386_latest.zip -d $HOME/android-sdk/cmdline-tools/latest
        rm commandlinetools-linux-9477386_latest.zip
        
        # 验证sdkmanager文件是否存在
        if [ -f "$HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "sdkmanager工具安装成功"
          # 设置文件执行权限
          chmod +x $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager
        else
          echo "sdkmanager工具未找到，检查目录结构"
          # 列出目录内容以调试
          ls -la $HOME/android-sdk/cmdline-tools/latest/
          # 尝试查找sdkmanager文件
          find $HOME/android-sdk -name "sdkmanager" -type f
          exit 1
        fi
        
        # 设置环境变量
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_ENV
        
        # 接受Android SDK许可证
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk --licenses
        
        # 安装必要的Android SDK组件
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "platform-tools" "build-tools;34.0.0" "platforms;android-33"
        
        # 验证Aidl工具是否安装成功
        if [ -f "$HOME/android-sdk/build-tools/34.0.0/aidl" ]; then
          echo "Aidl工具安装成功"
        else
          echo "Aidl工具未找到，尝试重新安装build-tools"
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "build-tools;34.0.0"
        fi
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer kivy cython
    
    - name: Use existing buildozer.spec
      run: |
        # 使用项目中的buildozer.spec文件，而不是重新创建
        if [ -f buildozer.spec ]; then
          echo "使用现有的buildozer.spec文件"
          cat buildozer.spec
        else
          echo "创建默认的buildozer.spec文件"
          # 使用echo命令逐行创建文件，避免heredoc语法问题
          echo "[app]" > buildozer.spec
          echo "title = SocketChatApp" >> buildozer.spec
          echo "package.name = socketchatapp" >> buildozer.spec
          echo "package.domain = org.socketchat" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "source.dir = ." >> buildozer.spec
          echo "source.include_exts = py,png,jpg,kv,atlas,txt,json,html,css" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "version = 1.0.0" >> buildozer.spec
          echo "requirements = python3,flask,pywebview" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "[buildozer]" >> buildozer.spec
          echo "log_level = 2" >> buildozer.spec
          echo "warn_on_root = yes" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "[android]" >> buildozer.spec
          echo "api = 33" >> buildozer.spec
          echo "minapi = 21" >> buildozer.spec
          echo "ndk = 23b" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "[android:app]" >> buildozer.spec
          echo "orientation = portrait" >> buildozer.spec
          echo "" >> buildozer.spec
          echo "[android:permission.INTERNET]" >> buildozer.spec
          echo "[android:permission.WRITE_EXTERNAL_STORAGE]" >> buildozer.spec
        fi
    
    - name: Build Android APK
      run: |
        # 设置环境变量避免交互式提示
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/bin:$ANDROID_HOME/platform-tools
        export BUILD_PATH=$PWD/.buildozer
        export CACHE_PATH=$HOME/.buildozer
        
        # 构建Android APK
        buildozer android debug
        
        # 检查构建结果
        if [ -d bin ]; then
          echo "构建成功，APK文件列表："
          ls -la bin/
        else
          echo "构建失败，检查错误日志"
          exit 1
        fi
    
    - name: Upload Android APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 30

  create-release:
    needs: [build-linux-x64, build-linux-arm64, build-windows-x64, build-android-apk]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: List downloaded artifacts
      run: ls -R
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: ${{ env.VERSION }}
        name: "Release ${{ env.VERSION }}"
        body: |
          Multi-platform build of $PROJECT_NAME
          
          Built artifacts include:
          - Linux x64 executable (Python 3.11)
          - Linux ARM64 executable (Python 3.11)
          - Windows x64 executable (Python 3.11)
          - Android APK
        draft: false
        prerelease: false
        files: |
          **/*